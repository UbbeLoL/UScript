//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mattias\Documents\Visual Studio 2015\Projects\UScript\UScript.Parser\UScript.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace UScript.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class UScriptParser : Parser {
	public const int
		T__42=1, T__41=2, T__40=3, T__39=4, T__38=5, T__37=6, T__36=7, T__35=8, 
		T__34=9, T__33=10, T__32=11, T__31=12, T__30=13, T__29=14, T__28=15, T__27=16, 
		T__26=17, T__25=18, T__24=19, T__23=20, T__22=21, T__21=22, T__20=23, 
		T__19=24, T__18=25, T__17=26, T__16=27, T__15=28, T__14=29, T__13=30, 
		T__12=31, T__11=32, T__10=33, T__9=34, T__8=35, T__7=36, T__6=37, T__5=38, 
		T__4=39, T__3=40, T__2=41, T__1=42, T__0=43, TYPE_BYTE=44, TYPE_INT=45, 
		TYPE_FLOAT=46, TYPE_STRING=47, TYPE_CHAR=48, NAME=49, NORMALSTRING=50, 
		CHARSTRING=51, LONGSTRING=52, INT=53, HEX=54, FLOAT=55, HEX_FLOAT=56, 
		COMMENT=57, LINE_COMMENT=58, WS=59, SHEBANG=60;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'/'", "'def'", "'func'", "'true'", "'return'", "';'", "'{'", 
		"'>>'", "'<<'", "'..'", "'::'", "'}'", "'='", "'^'", "'<='", "'&'", "'('", 
		"'*'", "','", "'.'", "'false'", "':'", "'>='", "'['", "'|'", "'//'", "'=='", 
		"'~='", "'<'", "']'", "'~'", "'>'", "'or'", "'#'", "'%'", "'function'", 
		"'end'", "')'", "'and'", "'nil'", "'+'", "'not'", "'-'", "'Byte'", "'Int'", 
		"'Float'", "'String'", "'Char'", "NAME", "NORMALSTRING", "CHARSTRING", 
		"LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", 
		"WS", "SHEBANG"
	};
	public const int
		RULE_module = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_label = 4, 
		RULE_funcname = 5, RULE_varlist = 6, RULE_namelist = 7, RULE_explist = 8, 
		RULE_exp = 9, RULE_prefixexp = 10, RULE_functioncall = 11, RULE_argList = 12, 
		RULE_varOrExp = 13, RULE_var = 14, RULE_varDecl = 15, RULE_varSuffix = 16, 
		RULE_nameAndArgs = 17, RULE_param = 18, RULE_type = 19, RULE_args = 20, 
		RULE_functiondef = 21, RULE_funcbody = 22, RULE_parlist = 23, RULE_tableconstructor = 24, 
		RULE_fieldlist = 25, RULE_field = 26, RULE_fieldsep = 27, RULE_operatorOr = 28, 
		RULE_operatorAnd = 29, RULE_operatorComparison = 30, RULE_operatorStrcat = 31, 
		RULE_operatorAddSub = 32, RULE_operatorMulDivMod = 33, RULE_operatorBitwise = 34, 
		RULE_operatorUnary = 35, RULE_operatorPower = 36, RULE_number = 37, RULE_string = 38;
	public static readonly string[] ruleNames = {
		"module", "block", "stat", "retstat", "label", "funcname", "varlist", 
		"namelist", "explist", "exp", "prefixexp", "functioncall", "argList", 
		"varOrExp", "var", "varDecl", "varSuffix", "nameAndArgs", "param", "type", 
		"args", "functiondef", "funcbody", "parlist", "tableconstructor", "fieldlist", 
		"field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorBitwise", 
		"operatorUnary", "operatorPower", "number", "string"
	};

	public override string GrammarFileName { get { return "UScript.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public UScriptParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UScriptParser.Eof, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; block();
			State = 79; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 81; stat();
					}
					} 
				}
				State = 86;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 88;
			_la = _input.La(1);
			if (_la==T__38) {
				{
				State = 87; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnStatementContext : StatContext {
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public ReturnStatementContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallStatementContext : StatContext {
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public FuncCallStatementContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFuncCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFuncCallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclStatementContext : StatContext {
		public FuncnameContext name;
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctionDeclStatementContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclStatementContext : StatContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public VarDeclStatementContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterVarDeclStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitVarDeclStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 97;
			switch (_input.La(1)) {
			case T__40:
				_localctx = new FunctionDeclStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; Match(T__40);
				State = 91; ((FunctionDeclStatementContext)_localctx).name = funcname();
				State = 92; funcbody();
				}
				break;
			case T__41:
				_localctx = new VarDeclStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; varDecl();
				}
				break;
			case NAME:
				_localctx = new FuncCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; functioncall();
				}
				break;
			case T__38:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; retstat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_retstat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(T__38);
			State = 101;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 100; exp(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(UScriptParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__32);
			State = 104; Match(NAME);
			State = 105; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(UScriptParser.NAME, 0); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_funcname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; var();
			State = 114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__24) {
				{
				{
				State = 110; Match(T__24);
				State = 111; var();
				}
				}
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(UScriptParser.NAME, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(UScriptParser.NAME); }
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(NAME);
			State = 122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__24) {
				{
				{
				State = 118; Match(T__24);
				State = 119; Match(NAME);
				}
				}
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; exp(0);
			State = 130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__24) {
				{
				{
				State = 126; Match(T__24);
				State = 127; exp(0);
				}
				}
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivModExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public MulDivModExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterMulDivModExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitMulDivModExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivModExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AndExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterAndExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitAndExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpContext : ExpContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseExpContext : ExpContext {
		public FalseExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFalseExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFalseExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public BitwiseExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OrExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExpContext : ExpContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterVarExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitVarExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public UnaryExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterUnaryExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitUnaryExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AddSubExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterAddSubExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitAddSubExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueExpContext : ExpContext {
		public TrueExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterTrueExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitTrueExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpContext : ExpContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterNumberExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitNumberExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public PowerExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterPowerExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitPowerExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilExpContext : ExpContext {
		public NilExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterNilExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitNilExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CmpExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public CmpExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterCmpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitCmpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			switch (_input.La(1)) {
			case T__12:
			case T__9:
			case T__1:
			case T__0:
				{
				_localctx = new UnaryExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 134; operatorUnary();
				State = 135; exp(7);
				}
				break;
			case T__3:
				{
				_localctx = new NilExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 137; Match(T__3);
				}
				break;
			case T__22:
				{
				_localctx = new FalseExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 138; Match(T__22);
				}
				break;
			case T__39:
				{
				_localctx = new TrueExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 139; Match(T__39);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				_localctx = new NumberExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 140; number();
				}
				break;
			case NAME:
				{
				_localctx = new VarExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 141; var();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				_localctx = new StringExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 142; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 175;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 173;
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						_localctx = new PowerExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 145;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 146; operatorPower();
						State = 147; exp(8);
						}
						break;

					case 2:
						{
						_localctx = new MulDivModExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 149;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 150; operatorMulDivMod();
						State = 151; exp(7);
						}
						break;

					case 3:
						{
						_localctx = new AddSubExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 153;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 154; operatorAddSub();
						State = 155; exp(6);
						}
						break;

					case 4:
						{
						_localctx = new CmpExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 157;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 158; operatorComparison();
						State = 159; exp(5);
						}
						break;

					case 5:
						{
						_localctx = new AndExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 161;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 162; operatorAnd();
						State = 163; exp(4);
						}
						break;

					case 6:
						{
						_localctx = new OrExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 165;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 166; operatorOr();
						State = 167; exp(3);
						}
						break;

					case 7:
						{
						_localctx = new BitwiseExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 169;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 170; operatorBitwise();
						State = 171; exp(2);
						}
						break;
					}
					} 
				}
				State = 177;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_prefixexp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; varOrExp();
			State = 182;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__26) | (1L << T__21) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 179; nameAndArgs();
				}
				}
				State = 184;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public FuncnameContext target;
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functioncall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; _localctx.target = funcname();
			State = 186; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(T__26);
			State = 190;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__22) | (1L << T__12) | (1L << T__9) | (1L << T__3) | (1L << T__1) | (1L << T__0) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 189; explist();
				}
			}

			State = 192; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_varOrExp);
		try {
			State = 199;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; var();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(T__26);
				State = 196; exp(0);
				State = 197; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(UScriptParser.NAME, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public IToken name;
		public ExpContext initData;
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(UScriptParser.NAME, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(T__41);
			State = 204; _localctx.name = Match(NAME);
			State = 207;
			_la = _input.La(1);
			if (_la==T__30) {
				{
				State = 205; Match(T__30);
				State = 206; _localctx.initData = exp(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(UScriptParser.NAME, 0); }
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__26) | (1L << T__21) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 209; nameAndArgs();
				}
				}
				State = 214;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 221;
			switch (_input.La(1)) {
			case T__19:
				{
				State = 215; Match(T__19);
				State = 216; exp(0);
				State = 217; Match(T__13);
				}
				break;
			case T__23:
				{
				State = 219; Match(T__23);
				State = 220; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(UScriptParser.NAME, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 223; Match(T__21);
				State = 224; Match(NAME);
				}
			}

			State = 227; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public TypeContext paramType;
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; var();
			State = 232;
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 230; Match(T__21);
				State = 231; _localctx.paramType = type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode TYPE_CHAR() { return GetToken(UScriptParser.TYPE_CHAR, 0); }
		public ITerminalNode TYPE_INT() { return GetToken(UScriptParser.TYPE_INT, 0); }
		public ITerminalNode TYPE_BYTE() { return GetToken(UScriptParser.TYPE_BYTE, 0); }
		public ITerminalNode TYPE_FLOAT() { return GetToken(UScriptParser.TYPE_FLOAT, 0); }
		public ITerminalNode TYPE_STRING() { return GetToken(UScriptParser.TYPE_STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_BYTE) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_STRING) | (1L << TYPE_CHAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_args);
		int _la;
		try {
			State = 243;
			switch (_input.La(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; Match(T__26);
				State = 238;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__22) | (1L << T__12) | (1L << T__9) | (1L << T__3) | (1L << T__1) | (1L << T__0) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 237; explist();
					}
				}

				State = 240; Match(T__5);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(T__7);
			State = 246; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public ParlistContext @params;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_funcbody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(T__26);
			State = 250;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 249; _localctx.@params = parlist();
				}
				break;
			}
			State = 252; Match(T__5);
			State = 253; block();
			State = 254; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_parlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = _input.La(1);
			if (_la==NAME) {
				{
				State = 256; param();
				}
			}

			State = 263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__24) {
				{
				{
				State = 259; Match(T__24);
				State = 260; param();
				}
				}
				State = 265;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(T__36);
			State = 268;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__22) | (1L << T__19) | (1L << T__12) | (1L << T__9) | (1L << T__3) | (1L << T__1) | (1L << T__0) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 267; fieldlist();
				}
			}

			State = 270; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; field();
			State = 278;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 273; fieldsep();
					State = 274; field();
					}
					} 
				}
				State = 280;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			State = 282;
			_la = _input.La(1);
			if (_la==T__37 || _la==T__24) {
				{
				State = 281; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ITerminalNode NAME() { return GetToken(UScriptParser.NAME, 0); }
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_field);
		try {
			State = 294;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; Match(T__19);
				State = 285; exp(0);
				State = 286; Match(T__13);
				State = 287; Match(T__30);
				State = 288; exp(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290; Match(NAME);
				State = 291; Match(T__30);
				State = 292; exp(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 293; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = _input.La(1);
			if ( !(_la==T__37 || _la==T__24) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__20) | (1L << T__16) | (1L << T__15) | (1L << T__14) | (1L << T__11))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_la = _input.La(1);
			if ( !(_la==T__2 || _la==T__0) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__42) | (1L << T__25) | (1L << T__17) | (1L << T__8))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__34) | (1L << T__27) | (1L << T__18) | (1L << T__12))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__9) | (1L << T__1) | (1L << T__0))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(UScriptParser.HEX, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(UScriptParser.HEX_FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(UScriptParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(UScriptParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public IToken strData;
		public ITerminalNode LONGSTRING() { return GetToken(UScriptParser.LONGSTRING, 0); }
		public ITerminalNode NORMALSTRING() { return GetToken(UScriptParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(UScriptParser.CHARSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUScriptListener typedListener = listener as IUScriptListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUScriptVisitor<TResult> typedVisitor = visitor as IUScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_string);
		try {
			State = 321;
			switch (_input.La(1)) {
			case NORMALSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; _localctx.strData = Match(NORMALSTRING);
				}
				break;
			case CHARSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; _localctx.strData = Match(CHARSTRING);
				}
				break;
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320; _localctx.strData = Match(LONGSTRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);

		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3>\x146\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\x3\x2\x3"+
		"\x2\x3\x3\a\x3U\n\x3\f\x3\xE\x3X\v\x3\x3\x3\x5\x3[\n\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x64\n\x4\x3\x5\x3\x5\x5\x5h\n\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\a\bs\n\b\f\b\xE\bv\v\b"+
		"\x3\t\x3\t\x3\t\a\t{\n\t\f\t\xE\t~\v\t\x3\n\x3\n\x3\n\a\n\x83\n\n\f\n"+
		"\xE\n\x86\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x92"+
		"\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\a\v\xB0\n\v\f\v\xE\v\xB3\v\v\x3\f\x3\f\a\f\xB7\n\f\f\f\xE\f\xBA"+
		"\v\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xC1\n\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\xCA\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x5\x11\xD2\n\x11\x3\x12\a\x12\xD5\n\x12\f\x12\xE\x12\xD8\v\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xE0\n\x12\x3\x13\x3\x13"+
		"\x5\x13\xE4\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14\xEB\n\x14"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\xF1\n\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\xF6\n\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\xFD\n\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x19\x5\x19\x104\n\x19\x3\x19\x3\x19\a\x19"+
		"\x108\n\x19\f\x19\xE\x19\x10B\v\x19\x3\x1A\x3\x1A\x5\x1A\x10F\n\x1A\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x117\n\x1B\f\x1B\xE\x1B"+
		"\x11A\v\x1B\x3\x1B\x5\x1B\x11D\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x129\n\x1C\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3"+
		"%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3(\x5(\x144\n(\x3(\x2\x2\x3\x14)\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2\x2"+
		"\n\x3\x2.\x32\x4\x2\b\b\x15\x15\x6\x2\x11\x11\x19\x19\x1D\x1F\"\"\x4\x2"+
		"++--\x6\x2\x3\x3\x14\x14\x1C\x1C%%\x6\x2\n\v\x12\x12\x1B\x1B!!\x5\x2!"+
		"!$$,-\x3\x2\x37:\x149\x2P\x3\x2\x2\x2\x4V\x3\x2\x2\x2\x6\x63\x3\x2\x2"+
		"\x2\b\x65\x3\x2\x2\x2\ni\x3\x2\x2\x2\fm\x3\x2\x2\x2\xEo\x3\x2\x2\x2\x10"+
		"w\x3\x2\x2\x2\x12\x7F\x3\x2\x2\x2\x14\x91\x3\x2\x2\x2\x16\xB4\x3\x2\x2"+
		"\x2\x18\xBB\x3\x2\x2\x2\x1A\xBE\x3\x2\x2\x2\x1C\xC9\x3\x2\x2\x2\x1E\xCB"+
		"\x3\x2\x2\x2 \xCD\x3\x2\x2\x2\"\xD6\x3\x2\x2\x2$\xE3\x3\x2\x2\x2&\xE7"+
		"\x3\x2\x2\x2(\xEC\x3\x2\x2\x2*\xF5\x3\x2\x2\x2,\xF7\x3\x2\x2\x2.\xFA\x3"+
		"\x2\x2\x2\x30\x103\x3\x2\x2\x2\x32\x10C\x3\x2\x2\x2\x34\x112\x3\x2\x2"+
		"\x2\x36\x128\x3\x2\x2\x2\x38\x12A\x3\x2\x2\x2:\x12C\x3\x2\x2\x2<\x12E"+
		"\x3\x2\x2\x2>\x130\x3\x2\x2\x2@\x132\x3\x2\x2\x2\x42\x134\x3\x2\x2\x2"+
		"\x44\x136\x3\x2\x2\x2\x46\x138\x3\x2\x2\x2H\x13A\x3\x2\x2\x2J\x13C\x3"+
		"\x2\x2\x2L\x13E\x3\x2\x2\x2N\x143\x3\x2\x2\x2PQ\x5\x4\x3\x2QR\a\x2\x2"+
		"\x3R\x3\x3\x2\x2\x2SU\x5\x6\x4\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2"+
		"\x2\x2VW\x3\x2\x2\x2WZ\x3\x2\x2\x2XV\x3\x2\x2\x2Y[\x5\b\x5\x2ZY\x3\x2"+
		"\x2\x2Z[\x3\x2\x2\x2[\x5\x3\x2\x2\x2\\]\a\x5\x2\x2]^\x5\f\a\x2^_\x5.\x18"+
		"\x2_\x64\x3\x2\x2\x2`\x64\x5 \x11\x2\x61\x64\x5\x18\r\x2\x62\x64\x5\b"+
		"\x5\x2\x63\\\x3\x2\x2\x2\x63`\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x62"+
		"\x3\x2\x2\x2\x64\a\x3\x2\x2\x2\x65g\a\a\x2\x2\x66h\x5\x14\v\x2g\x66\x3"+
		"\x2\x2\x2gh\x3\x2\x2\x2h\t\x3\x2\x2\x2ij\a\r\x2\x2jk\a\x33\x2\x2kl\a\r"+
		"\x2\x2l\v\x3\x2\x2\x2mn\a\x33\x2\x2n\r\x3\x2\x2\x2ot\x5\x1E\x10\x2pq\a"+
		"\x15\x2\x2qs\x5\x1E\x10\x2rp\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2t"+
		"u\x3\x2\x2\x2u\xF\x3\x2\x2\x2vt\x3\x2\x2\x2w|\a\x33\x2\x2xy\a\x15\x2\x2"+
		"y{\a\x33\x2\x2zx\x3\x2\x2\x2{~\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2"+
		"}\x11\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F\x84\x5\x14\v\x2\x80\x81\a\x15\x2\x2"+
		"\x81\x83\x5\x14\v\x2\x82\x80\x3\x2\x2\x2\x83\x86\x3\x2\x2\x2\x84\x82\x3"+
		"\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x13\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2"+
		"\x87\x88\b\v\x1\x2\x88\x89\x5H%\x2\x89\x8A\x5\x14\v\t\x8A\x92\x3\x2\x2"+
		"\x2\x8B\x92\a*\x2\x2\x8C\x92\a\x17\x2\x2\x8D\x92\a\x6\x2\x2\x8E\x92\x5"+
		"L\'\x2\x8F\x92\x5\x1E\x10\x2\x90\x92\x5N(\x2\x91\x87\x3\x2\x2\x2\x91\x8B"+
		"\x3\x2\x2\x2\x91\x8C\x3\x2\x2\x2\x91\x8D\x3\x2\x2\x2\x91\x8E\x3\x2\x2"+
		"\x2\x91\x8F\x3\x2\x2\x2\x91\x90\x3\x2\x2\x2\x92\xB1\x3\x2\x2\x2\x93\x94"+
		"\f\n\x2\x2\x94\x95\x5J&\x2\x95\x96\x5\x14\v\n\x96\xB0\x3\x2\x2\x2\x97"+
		"\x98\f\b\x2\x2\x98\x99\x5\x44#\x2\x99\x9A\x5\x14\v\t\x9A\xB0\x3\x2\x2"+
		"\x2\x9B\x9C\f\a\x2\x2\x9C\x9D\x5\x42\"\x2\x9D\x9E\x5\x14\v\b\x9E\xB0\x3"+
		"\x2\x2\x2\x9F\xA0\f\x6\x2\x2\xA0\xA1\x5> \x2\xA1\xA2\x5\x14\v\a\xA2\xB0"+
		"\x3\x2\x2\x2\xA3\xA4\f\x5\x2\x2\xA4\xA5\x5<\x1F\x2\xA5\xA6\x5\x14\v\x6"+
		"\xA6\xB0\x3\x2\x2\x2\xA7\xA8\f\x4\x2\x2\xA8\xA9\x5:\x1E\x2\xA9\xAA\x5"+
		"\x14\v\x5\xAA\xB0\x3\x2\x2\x2\xAB\xAC\f\x3\x2\x2\xAC\xAD\x5\x46$\x2\xAD"+
		"\xAE\x5\x14\v\x4\xAE\xB0\x3\x2\x2\x2\xAF\x93\x3\x2\x2\x2\xAF\x97\x3\x2"+
		"\x2\x2\xAF\x9B\x3\x2\x2\x2\xAF\x9F\x3\x2\x2\x2\xAF\xA3\x3\x2\x2\x2\xAF"+
		"\xA7\x3\x2\x2\x2\xAF\xAB\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2"+
		"\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\x15\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4"+
		"\xB8\x5\x1C\xF\x2\xB5\xB7\x5$\x13\x2\xB6\xB5\x3\x2\x2\x2\xB7\xBA\x3\x2"+
		"\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\x17\x3\x2\x2\x2\xBA"+
		"\xB8\x3\x2\x2\x2\xBB\xBC\x5\f\a\x2\xBC\xBD\x5\x1A\xE\x2\xBD\x19\x3\x2"+
		"\x2\x2\xBE\xC0\a\x13\x2\x2\xBF\xC1\x5\x12\n\x2\xC0\xBF\x3\x2\x2\x2\xC0"+
		"\xC1\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\a(\x2\x2\xC3\x1B\x3\x2\x2"+
		"\x2\xC4\xCA\x5\x1E\x10\x2\xC5\xC6\a\x13\x2\x2\xC6\xC7\x5\x14\v\x2\xC7"+
		"\xC8\a(\x2\x2\xC8\xCA\x3\x2\x2\x2\xC9\xC4\x3\x2\x2\x2\xC9\xC5\x3\x2\x2"+
		"\x2\xCA\x1D\x3\x2\x2\x2\xCB\xCC\a\x33\x2\x2\xCC\x1F\x3\x2\x2\x2\xCD\xCE"+
		"\a\x4\x2\x2\xCE\xD1\a\x33\x2\x2\xCF\xD0\a\xF\x2\x2\xD0\xD2\x5\x14\v\x2"+
		"\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2!\x3\x2\x2\x2\xD3\xD5\x5$"+
		"\x13\x2\xD4\xD3\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\xDF\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\xDA\a\x1A"+
		"\x2\x2\xDA\xDB\x5\x14\v\x2\xDB\xDC\a \x2\x2\xDC\xE0\x3\x2\x2\x2\xDD\xDE"+
		"\a\x16\x2\x2\xDE\xE0\a\x33\x2\x2\xDF\xD9\x3\x2\x2\x2\xDF\xDD\x3\x2\x2"+
		"\x2\xE0#\x3\x2\x2\x2\xE1\xE2\a\x18\x2\x2\xE2\xE4\a\x33\x2\x2\xE3\xE1\x3"+
		"\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE6\x5*\x16\x2\xE6"+
		"%\x3\x2\x2\x2\xE7\xEA\x5\x1E\x10\x2\xE8\xE9\a\x18\x2\x2\xE9\xEB\x5(\x15"+
		"\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\'\x3\x2\x2\x2\xEC\xED"+
		"\t\x2\x2\x2\xED)\x3\x2\x2\x2\xEE\xF0\a\x13\x2\x2\xEF\xF1\x5\x12\n\x2\xF0"+
		"\xEF\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF6\a(\x2"+
		"\x2\xF3\xF6\x5\x32\x1A\x2\xF4\xF6\x5N(\x2\xF5\xEE\x3\x2\x2\x2\xF5\xF3"+
		"\x3\x2\x2\x2\xF5\xF4\x3\x2\x2\x2\xF6+\x3\x2\x2\x2\xF7\xF8\a&\x2\x2\xF8"+
		"\xF9\x5.\x18\x2\xF9-\x3\x2\x2\x2\xFA\xFC\a\x13\x2\x2\xFB\xFD\x5\x30\x19"+
		"\x2\xFC\xFB\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF"+
		"\a(\x2\x2\xFF\x100\x5\x4\x3\x2\x100\x101\a\'\x2\x2\x101/\x3\x2\x2\x2\x102"+
		"\x104\x5&\x14\x2\x103\x102\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x109"+
		"\x3\x2\x2\x2\x105\x106\a\x15\x2\x2\x106\x108\x5&\x14\x2\x107\x105\x3\x2"+
		"\x2\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2"+
		"\x2\x10A\x31\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x10E\a\t\x2\x2\x10D"+
		"\x10F\x5\x34\x1B\x2\x10E\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110"+
		"\x3\x2\x2\x2\x110\x111\a\xE\x2\x2\x111\x33\x3\x2\x2\x2\x112\x118\x5\x36"+
		"\x1C\x2\x113\x114\x5\x38\x1D\x2\x114\x115\x5\x36\x1C\x2\x115\x117\x3\x2"+
		"\x2\x2\x116\x113\x3\x2\x2\x2\x117\x11A\x3\x2\x2\x2\x118\x116\x3\x2\x2"+
		"\x2\x118\x119\x3\x2\x2\x2\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2"+
		"\x11B\x11D\x5\x38\x1D\x2\x11C\x11B\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D"+
		"\x35\x3\x2\x2\x2\x11E\x11F\a\x1A\x2\x2\x11F\x120\x5\x14\v\x2\x120\x121"+
		"\a \x2\x2\x121\x122\a\xF\x2\x2\x122\x123\x5\x14\v\x2\x123\x129\x3\x2\x2"+
		"\x2\x124\x125\a\x33\x2\x2\x125\x126\a\xF\x2\x2\x126\x129\x5\x14\v\x2\x127"+
		"\x129\x5\x14\v\x2\x128\x11E\x3\x2\x2\x2\x128\x124\x3\x2\x2\x2\x128\x127"+
		"\x3\x2\x2\x2\x129\x37\x3\x2\x2\x2\x12A\x12B\t\x3\x2\x2\x12B\x39\x3\x2"+
		"\x2\x2\x12C\x12D\a#\x2\x2\x12D;\x3\x2\x2\x2\x12E\x12F\a)\x2\x2\x12F=\x3"+
		"\x2\x2\x2\x130\x131\t\x4\x2\x2\x131?\x3\x2\x2\x2\x132\x133\a\f\x2\x2\x133"+
		"\x41\x3\x2\x2\x2\x134\x135\t\x5\x2\x2\x135\x43\x3\x2\x2\x2\x136\x137\t"+
		"\x6\x2\x2\x137\x45\x3\x2\x2\x2\x138\x139\t\a\x2\x2\x139G\x3\x2\x2\x2\x13A"+
		"\x13B\t\b\x2\x2\x13BI\x3\x2\x2\x2\x13C\x13D\a\x10\x2\x2\x13DK\x3\x2\x2"+
		"\x2\x13E\x13F\t\t\x2\x2\x13FM\x3\x2\x2\x2\x140\x144\a\x34\x2\x2\x141\x144"+
		"\a\x35\x2\x2\x142\x144\a\x36\x2\x2\x143\x140\x3\x2\x2\x2\x143\x141\x3"+
		"\x2\x2\x2\x143\x142\x3\x2\x2\x2\x144O\x3\x2\x2\x2\x1EVZ\x63gt|\x84\x91"+
		"\xAF\xB1\xB8\xC0\xC9\xD1\xD6\xDF\xE3\xEA\xF0\xF5\xFC\x103\x109\x10E\x118"+
		"\x11C\x128\x143";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace UScript.Parser
